openapi: 3.0.3
info:
  title: GruPI - API de Grupos de Projeto
  version: 1.0.0
  description: "API para plataforma de formação de grupos de projeto acadêmico da\
    \ UNIVESP.\n    \nPermite que usuários se cadastrem, criem perfis, encontrem grupos\
    \ compatíveis \ncom base em critérios acadêmicos (Polo, DRP, Curso, Eixo, PI)\
    \ e gerenciem \nsua participação em grupos de projeto.\n\n**Recursos principais:**\n\
    - Autenticação via JWT (dj-rest-auth)\n- Gestão de perfil de usuário com tags\
    \ de habilidades\n- Criação e gerenciamento de grupos de projeto\n- Sistema de\
    \ membros com roles (ADMIN/MEMBER)\n- Dados acadêmicos (Eixos, Cursos, DRPs, Polos,\
    \ PIs)"
  contact:
    name: Equipe de Desenvolvimento GruPI
    email: dev-grupi@pavops.net
paths:
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/registration/:
    post:
      operationId: auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/v1/auth/registration/resend-email/:
    post:
      operationId: auth_registration_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/registration/verify-email/:
    post:
      operationId: auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/v1/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
  /api/v1/cursos/:
    get:
      operationId: cursos_list
      tags:
      - cursos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Curso'
          description: ''
  /api/v1/drps/:
    get:
      operationId: drps_list
      tags:
      - drps
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DRP'
          description: ''
  /api/v1/eixos/:
    get:
      operationId: eixos_list
      tags:
      - eixos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eixo'
          description: ''
  /api/v1/join-requests/:
    get:
      operationId: join_requests_list
      description: Lista todas as solicitações de entrada pendentes para um grupo
        específico.
      tags:
      - join-requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JoinRequest'
          description: ''
  /api/v1/join-requests/{id}/approve/:
    post:
      operationId: join_requests_approve_create
      description: Permite que um administrador de grupo aprove um pedido de entrada
        pendente. Isso cria um novo vínculo (Membership) e atualiza o status do pedido.
      summary: Aprovar um Pedido de Entrada
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Ações de Pedidos de Entrada
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Sucesso. A solicitação foi aprovada e o usuário agora é um
            membro.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Requisição Inválida. O usuário já pode ser membro ou a solicitação
            já foi processada.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Permissão Negada. O usuário não é o administrador do grupo.
        '404':
          description: Não Encontrado. O pedido de entrada com o PK especificado não
            existe.
  /api/v1/join-requests/{id}/reject/:
    post:
      operationId: join_requests_reject_create
      description: Permite que o administrador de um grupo rejeite um pedido de entrada
        pendente.
      summary: Rejeitar um Pedido de Entrada
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Ações de Pedidos de Entrada
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Sucesso. Solicitação rejeitada.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: 'Requisição Inválida (ex: pedido já processado).'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Permissão Negada.
        '404':
          description: Não Encontrado. Pedido de entrada não existe.
  /api/v1/join-requests/me/:
    get:
      operationId: join_requests_me_list
      tags:
      - join-requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JoinRequest'
          description: ''
  /api/v1/leave-group/:
    post:
      operationId: leave_group_create
      description: Permite que um usuário autenticado saia do grupo ao qual pertence.
        O administrador não pode usar esta rota.
      summary: Sair do Grupo Atual
      tags:
      - Ações de Grupo
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Sucesso. O usuário saiu do grupo e não há corpo na resposta.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Requisição Inválida (usuário não pertence a nenhum grupo).
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Permissão Negada (administrador tentando sair).
  /api/v1/pis/:
    get:
      operationId: pis_list
      tags:
      - pis
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjetoIntegrador'
          description: ''
  /api/v1/polos/:
    get:
      operationId: polos_list
      tags:
      - polos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Polo'
          description: ''
  /api/v1/profiles/{user_pk}/:
    get:
      operationId: profiles_retrieve
      parameters:
      - in: path
        name: user_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDetail'
          description: ''
  /api/v1/profiles/me/:
    get:
      operationId: profiles_me_retrieve
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDetail'
          description: ''
    put:
      operationId: profiles_me_update
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDetail'
          description: ''
    patch:
      operationId: profiles_me_partial_update
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
  /api/v1/profiles/me/tags/:
    get:
      operationId: profiles_me_tags_list
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
  /api/v1/project-groups/:
    get:
      operationId: project_groups_list
      tags:
      - project-groups
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectGroup'
          description: ''
    post:
      operationId: project_groups_create
      tags:
      - project-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroup'
          description: ''
  /api/v1/project-groups/{group_pk}/members/:
    get:
      operationId: project_groups_members_list
      parameters:
      - in: path
        name: group_pk
        schema:
          type: integer
        required: true
      tags:
      - project-groups
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipUserId'
          description: ''
  /api/v1/project-groups/{group_pk}/members/{user_pk}/:
    delete:
      operationId: project_groups_members_destroy
      description: Permite que um administrador de grupo (ou o próprio usuário, dependendo
        da permissão) remova um membro de um grupo.
      summary: Remover um Membro do Grupo
      parameters:
      - in: path
        name: group_pk
        schema:
          type: integer
        required: true
      - in: path
        name: user_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Ações de Membros
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Sucesso. O membro foi removido e não há corpo na resposta.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Permissão Negada.
        '404':
          description: Não Encontrado. Grupo, usuário ou vínculo de membro não existem.
  /api/v1/project-groups/{id}/:
    get:
      operationId: project_groups_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - project-groups
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroup'
          description: ''
    put:
      operationId: project_groups_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - project-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectGroupRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroup'
          description: ''
    patch:
      operationId: project_groups_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - project-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectGroupUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectGroupUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectGroupUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroupUpdate'
          description: ''
    delete:
      operationId: project_groups_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - project-groups
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/project-groups/{id}/join/:
    post:
      operationId: project_groups_join_create
      description: Permite que um usuário entre diretamente em um grupo aberto ou
        envie um pedido de entrada para um grupo moderado.
      summary: Entrar ou Solicitar Entrada em um Grupo
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Ações de Grupo
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Entrada com Sucesso (grupo aberto).
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Solicitação Enviada (grupo moderado).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Requisição Inválida (usuário já está em um grupo ou já solicitou).
        '404':
          description: Não Encontrado. O grupo especificado não existe.
  /api/v1/project-groups/me/:
    get:
      operationId: project_groups_me_retrieve
      tags:
      - project-groups
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroup'
          description: ''
  /api/v1/tags/:
    get:
      operationId: tags_list
      tags:
      - tags
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
components:
  schemas:
    Curso:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        nome:
          type: string
          maxLength: 150
        eixo:
          allOf:
          - $ref: '#/components/schemas/Eixo'
          readOnly: true
      required:
      - eixo
      - id
      - nome
    CustomRegisterRequest:
      type: object
      description: |-
        Serializer personalizado para o registro de usuários, incluindo
        os campos obrigatórios do UserProfile.
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
        projeto_integrador:
          type: integer
          writeOnly: true
        drp:
          type: integer
          writeOnly: true
        polo:
          type: integer
          writeOnly: true
        curso:
          type: integer
          writeOnly: true
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
      required:
      - curso
      - drp
      - email
      - first_name
      - last_name
      - password1
      - password2
      - polo
      - projeto_integrador
    CustomUser:
      type: object
      properties:
        pk:
          type: string
          format: uuid
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
    CustomUserDetails:
      type: object
      description: |-
        Serializer para o endpoint /api/auth/user/.
        Define quais campos do usuário são retornados.
      properties:
        pk:
          type: string
          format: uuid
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
      required:
      - email
      - pk
      - profile
    CustomUserDetailsRequest:
      type: object
      description: |-
        Serializer para o endpoint /api/auth/user/.
        Define quais campos do usuário são retornados.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
    CustomUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
    DRP:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        numero:
          type: integer
          maximum: 14
          minimum: 1
          title: Numero do DRP
      required:
      - id
      - numero
    Eixo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        nome:
          type: string
          maxLength: 100
      required:
      - id
      - nome
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/CustomUserDetails'
      required:
      - access
      - refresh
      - user
    JoinRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          format: email
          title: Email address
          readOnly: true
        project_group:
          type: string
          title: Nome Do Grupo
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        date_requested:
          type: string
          format: date
          readOnly: true
      required:
      - date_requested
      - id
      - project_group
      - user
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    Membership:
      type: object
      properties:
        user:
          type: string
          format: email
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - user
    MembershipRequest:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/RoleEnum'
    MembershipUserId:
      type: object
      properties:
        user:
          type: string
          format: email
          title: Email address
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - user
    MessageResponse:
      type: object
      description: Serializer para respostas de mensagem simples com uma chave 'detail'.
      properties:
        detail:
          type: string
      required:
      - detail
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedCustomUserDetailsRequest:
      type: object
      description: |-
        Serializer para o endpoint /api/auth/user/.
        Define quais campos do usuário são retornados.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    PatchedProjectGroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nome Do Grupo
          maxLength: 150
        description:
          type: string
          nullable: true
          title: Descricao do Grupo
        tags:
          type: array
          items:
            type: integer
    PatchedUserProfileUpdateRequest:
      type: object
      properties:
        polo:
          type: integer
        curso:
          type: integer
        projeto_integrador:
          type: integer
        tags:
          type: array
          items:
            type: integer
    Polo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        nome:
          type: string
          maxLength: 100
        drp:
          allOf:
          - $ref: '#/components/schemas/DRP'
          readOnly: true
      required:
      - drp
      - id
      - nome
    ProjectGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nome Do Grupo
          maxLength: 150
        description:
          type: string
          nullable: true
          title: Descricao do Grupo
        creator:
          type: string
          format: email
          title: Email address
          readOnly: true
        projeto_integrador:
          type: string
          readOnly: true
        drp:
          type: string
          readOnly: true
        polo:
          type: string
          readOnly: true
        eixo:
          type: string
          readOnly: true
        curso:
          type: string
          readOnly: true
        moderated:
          type: boolean
          title: Moderado
        tags:
          type: array
          items:
            type: integer
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/Membership'
          readOnly: true
      required:
      - creator
      - curso
      - drp
      - eixo
      - id
      - memberships
      - name
      - polo
      - projeto_integrador
      - tags
    ProjectGroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nome Do Grupo
          maxLength: 150
        description:
          type: string
          nullable: true
          title: Descricao do Grupo
        moderated:
          type: boolean
          title: Moderado
        tags:
          type: array
          items:
            type: integer
      required:
      - name
      - tags
    ProjectGroupUpdate:
      type: object
      properties:
        name:
          type: string
          title: Nome Do Grupo
          maxLength: 150
        description:
          type: string
          nullable: true
          title: Descricao do Grupo
        tags:
          type: array
          items:
            type: integer
      required:
      - name
      - tags
    ProjetoIntegrador:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        numero:
          type: integer
          maximum: 6
          minimum: 1
          title: Numero do Projeto Integrador
      required:
      - id
      - numero
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    RoleEnum:
      enum:
      - MEMBER
      - ADMIN
      type: string
      description: |-
        * `MEMBER` - Membro
        * `ADMIN` - Admin
    StatusEnum:
      enum:
      - PENDING
      - APPROVED
      - REJECTED
      type: string
      description: |-
        * `PENDING` - Pendente
        * `APPROVED` - Aprovado
        * `REJECTED` - Rejetado
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    TagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    UserProfile:
      type: object
      description: |-
        Serializer para exibir os detalhes do perfil do usuário.
        Usa StringRelatedField para mostrar os nomes em vez dos IDs.
      properties:
        polo:
          type: string
          readOnly: true
        curso:
          type: string
          readOnly: true
        projeto_integrador:
          type: string
          readOnly: true
        eixo:
          type: string
          readOnly: true
        drp:
          type: string
          readOnly: true
      required:
      - curso
      - drp
      - eixo
      - polo
      - projeto_integrador
    UserProfileDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        polo:
          type: string
          readOnly: true
        curso:
          type: string
          readOnly: true
        projeto_integrador:
          type: string
          readOnly: true
        eixo:
          type: string
          readOnly: true
        drp:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
      required:
      - curso
      - drp
      - eixo
      - id
      - polo
      - projeto_integrador
      - tags
      - user
    UserProfileUpdate:
      type: object
      properties:
        polo:
          type: integer
        curso:
          type: integer
        projeto_integrador:
          type: integer
        tags:
          type: array
          items:
            type: integer
      required:
      - curso
      - polo
      - projeto_integrador
      - tags
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://127.0.0.1:8000/
  description: Servidor de Desenvolvimento Local
- url: https://api.grupi.com/
  description: Servidor de Produção
