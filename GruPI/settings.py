"""
Django settings for GruPI project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path

from django.conf.global_settings import AUTH_USER_MODEL

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-wfm92ppy$0h&nmasdq#3h3jnmr+1(31pvd=#pbc^1r9#&!+ty=e$7')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_ENV', 'dev') == 'dev'
ENV = os.environ.get('DJANGO_ENV', 'local')

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '*').split(',')

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'admin_reorder',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',

    'dj_rest_auth',
    'dj_rest_auth.registration',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'corsheaders',
    'drf_spectacular',
    'drf_spectacular_sidecar',

    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]

ROOT_URLCONF = 'GruPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GruPI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração dinâmica do banco de dados baseado em variáveis de ambiente
if env == 'prod' or env == 'dev':
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            ssl_require=False
        )
    }

else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'core.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_HTTPONLY': False,
    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer',
#    'LOGIN_SERIALIZER': 'core.serializers.CustomLoginSerializer',
    'REGISTER_SERIALIZER': 'core.serializers.CustomRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'core.serializers.CustomUserDetailsSerializer',
}

# Configurações do drf-spectacular para documentação OpenAPI
SPECTACULAR_SETTINGS = {
    'TITLE': 'GruPI - API de Grupos de Projeto',
    'DESCRIPTION': '''API para plataforma de formação de grupos de projeto acadêmico da UNIVESP.
    
Permite que usuários se cadastrem, criem perfis, encontrem grupos compatíveis 
com base em critérios acadêmicos (Polo, DRP, Curso, Eixo, PI) e gerenciem 
sua participação em grupos de projeto.

**Recursos principais:**
- Autenticação via JWT (dj-rest-auth)
- Gestão de perfil de usuário com tags de habilidades
- Criação e gerenciamento de grupos de projeto
- Sistema de membros com roles (ADMIN/MEMBER)
- Dados acadêmicos (Eixos, Cursos, DRPs, Polos, PIs)''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': 'Equipe de Desenvolvimento GruPI',
        'email': 'dev-grupi@pavops.net'
    },
    'SERVERS': [
        {'url': 'http://127.0.0.1:8000', 'description': 'Servidor de Desenvolvimento Local'},
        {'url': 'https://api.grupi-dev.pavops.net', 'description': 'Servidor de Desenvolvimento'},
        {'url': 'https://api.grupi.pavops.net', 'description': 'Servidor de Produção'},
    ],
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/v1',
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

ACCOUNT_ADAPTER = 'core.adapters.CustomAccountAdapter'

SITE_ID = 1

# Garante que o Django use o motor de autenticação do allauth, que entende de logins por email.
AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# --- Configurações Modernas para Login e Registro ---
ACCOUNT_LOGIN_METHODS = ['email']

# Define quais campos aparecem no formulário de registro e se são obrigatórios.
# O asterisco (*) significa 'obrigatório'.
# ESTA É A CONFIGURAÇÃO QUE SATISFAZ OS AVISOS.
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']

# Remove a necessidade de um campo de username no modelo do usuário para o allauth.
# Essencial para um sistema sem username.
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

# Garante que cada e-mail seja único no banco de dados.
ACCOUNT_UNIQUE_EMAIL = True

# Define o nível de verificação de e-mail (pode ser 'mandatory' em produção).
ACCOUNT_EMAIL_VERIFICATION = 'optional'


# --- Backend de E-mail para Desenvolvimento ---
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# ==========================================
# CONFIGURAÇÕES DO WHITENOISE
# ==========================================

# Habilita compressão e cache de arquivos estáticos
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Configurações adicionais do WhiteNoise
WHITENOISE_MAX_AGE = 31536000  # Cache por 1 ano em produção
WHITENOISE_AUTOREFRESH = DEBUG  # Auto-refresh apenas em desenvolvimento

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================================
# CONFIGURAÇÕES DE CORS
# ==========================================

# Permite requisições do frontend React em desenvolvimento
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000').split(',')

# Headers permitidos nas requisições
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Métodos HTTP permitidos
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Permite envio de cookies e credenciais
CORS_ALLOW_CREDENTIALS = True

# ==========================================
# CONFIGURAÇÕES DE SEGURANÇA PARA PRODUÇÃO
# ==========================================

if ENV == 'prod' or ENV == 'dev':

    SECURE_SSL_REDIRECT = False #e feito pelo proxy reverso, ex: nginx]
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'https://grupi.pavops.net,https://www.grupi.pavops.net').split(',')
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 ano
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True


    # Configurações adicionais de segurança
    X_FRAME_OPTIONS = 'DENY'

# ==========================================

ADMIN_REORDER = (
    # Primeiro grupo: "Gerenciamento de Acesso"
    {
        'app': 'core',  # A app real dos modelos
        'label': 'Gerenciamento de Acesso', # O nome que aparecerá no Admin
        'models': (
            'core.CustomUser',
            'core.UserProfile',
            'core.UserTags',
            'account.EmailAddress'
        )
    },

    # Segundo grupo: "Projetos e Grupos"
    {
        'app': 'core',
        'label': 'Dados dos Grupo de Projetos',
        'models': (
            'core.ProjectGroup',
            'core.Membership',
            'core.JoinRequest',
            'core.ProjectGroupTags'
        )
    },

    # Terceiro grupo: "Configurações Acadêmicas"
    {
        'app': 'core',
        'label': 'Estrutura Acadêmica',
        'models': (
            'core.DRP',
            'core.Polo',
            'core.Eixo',
            'core.Curso',
            'core.ProjetoIntegrador',
            'core.Tags'
        )
    },
)